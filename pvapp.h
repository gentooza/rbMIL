/*
 * SCADA RB1000 - Plastic rolling machine RB1000, operator Interface
 *
 *  Copyright 2012-2014 by it's authors. 
 *
 *  Some rights reserved. See COPYING, AUTHORS.
 *  This file may be used under the terms of the GNU General Public
 *  License version 3.0 as published by the Free Software Foundation
 *  and appearing in the file COPYING included in the packaging of
 *  this file.
 *
 *  This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 *  WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
//***************************************************************************
//                          pvapp.h  -  description
//                             -------------------
//  begin            : dom may 18 19:14:12 2014
//  generated by     : pvdevelop (C) Lehrig Software Engineering
//  email            : lehrig@t-online.de
//***************************************************************************

#ifndef _PVAPP_H_
#define _PVAPP_H_

#ifdef USE_INETD
static int trace=0; // todo: set trace=0 if you do not want printf() within event loop
#else
static int trace=1; // todo: set trace=0 if you do not want printf() within event loop
#endif

#include "processviewserver.h"
#include "rlthread.h"
#include "rlevent.h"
#include "alarm.h"
// todo: comment me out
#include <rldataacquisition.h>
#include "rlmodbusclient.h"
//#include "rlsiemenstcpclient.h"
//#include "rlppiclient.h"
//#include "modbusdaemon.h"             // this is generated
//#include "siemensdaemon.h"            // this is generated
//#include "ppidaemon.h"                // this is generated
#include <sqlite3.h>
#include "piUsrMgnt.h"
#include <sstream>

typedef struct // (todo: define your data structure here)
{
	int thisMask;
	int lastMask;
	
	std::string CurrUser;
	int UserId;
	int UserLvl;

	sqlite3 *DB;
}
GLOBAL_DATA;
typedef struct // (todo: define your data structure here)
{
	int val[500];
	int wval[500];
	char* snum[10];
	int con_vel;
	int con_ten_d;
	int con_ten_r1;
	int con_ten_r2;
	int state;
	std::string sUser;
	std::string sPass;
	int UserIdPassDlg;
	int ParamIdDlg;
	char UsersName[13][100];

	char alarmsId[100][100];
	int alarmasAdd[100];
	int num_alarmas;

	int statusD[16];
	int statusR1[16];
	int statusR2[16];
	

	//test
	int xtest;
}
DATA;


int show_mask7(PARAM *p);
int show_mask6(PARAM *p);
int show_mask5(PARAM *p);
int show_mask4(PARAM *p);
int show_mask3(PARAM *p);
int show_mask2(PARAM *p);
int show_mask1(PARAM *p);

enum lModbusVariables {
 ESTADO_MAQUINA,
 LECTURA_VELOCIDAD,
 LECTURA_TENSION_D,
 LECTURA_TENSION_R1,
 LECTURA_TENSION_R2,
 LECTURA_DIAMETRO_D,
 LECTURA_DIAMETRO_R1,
 LECTURA_DIAMETRO_R2,
 SCHAB_RB2,
 TOTAL_METROS,
 AL_PAROCCM1,
 AL_PAROC1,
 AL_PAROC2,
 AL_PAROC3,
 AL_PAROC4,
 W_TRAINO,
 W_BRAZOD,
 W_BRAZOR1,
 W_BRAZOR2,
 W_GLOBOD,
 W_GLOBOR1,
 W_GLOBOR2,
 W_METROSALCZ,
 W_DIAMETROALCZ,
 TOTAL_METROS_SESION,
 TOTAL_METROS_USUARIO_H,
 TOTAL_METROS_USUARIO_L,
 AL_ETHCAT_D,
 AL_ETHCAT_R1,
 AL_ETHCAT_R2,
 AL_ETHCAT_T,
 AL_ETHCAT,
 TOTAL_METROS_USUARIO1_H,
 TOTAL_METROS_USUARIO1_L,
 TOTAL_METROS_USUARIO2_H,
 TOTAL_METROS_USUARIO2_L,
 TOTAL_METROS_USUARIO3_H,
 TOTAL_METROS_USUARIO3_L,
 TOTAL_METROS_USUARIO4_H,
 TOTAL_METROS_USUARIO4_L,
 TOTAL_METROS_USUARIO5_H,
 TOTAL_METROS_USUARIO5_L,
 TOTAL_METROS_USUARIO6_H,
 TOTAL_METROS_USUARIO6_L,
 TOTAL_METROS_USUARIO7_H,
 TOTAL_METROS_USUARIO7_L,
 TOTAL_METROS_USUARIO8_H,
 TOTAL_METROS_USUARIO8_L,
 TOTAL_METROS_USUARIO9_H,
 TOTAL_METROS_USUARIO9_L,
 TOTAL_METROS_USUARIO10_H,
 TOTAL_METROS_USUARIO10_L,
 SCW_STATUSSD1, // (contgral,neumgral,hidrgral,didrecirc)
 SCW_STATUSR1, //retCant_r1,extCant_R1,RetPsBob_r1,ExtPsBob,retejefij,extejefij,entairglob,salairglob,retpisor,extpisor,retpisorPM,extpisorPM
 SCW_STATUSR1B, //Psret,psext,ejedesb,ejebloq,cantabj,cantarr,pisonarr,pisonPMarr,globo
 SCW_STATUSR2, //retCant_r2,extCant_R2,RetPsBob_R2,ExtPsBob,retejefij,extejefij,entairglob,salairglob,retpisor,extpisor,retpisorPM,extpisorPM
 SCW_STATUSR2B, //Psret,psext,ejedesb,ejebloq,cantabj,cantarr,pisonarr,pisonPMarr,globo
 SCW_STATUSD, //retCant_d,extCant_d,RetPsBob_d,ExtPsBob,retejefij,extejefij,entairglob,salairglob,retpisorMinf,extpisorMinf,retpisorMsup,extpisorMsup,retPisor_T,extpisor_T
 SCW_STATUSDB, //Psret,psext,ejedesb,ejebloq,cantabj,cantarr,pisonsuparr,pisoninfarr,pisonarr_t,pisonabj_t,globo
 PERMISIVOS_MARCHA,
 END_INPUT_REGISTERS
};
enum wModbusVariables {
 wCONSIGNA_VELOCIDAD,
 wCONSIGNA_TENSION_D,
 wCONSIGNA_TENSION_R1,
 wCONSIGNA_TENSION_R2,
 wMAT_ABAJO_D,
 wMAT_ABAJO_R1,
 wMAT_ABAJO_R2,
 wHAB_CORTE,
 wHAB_R2,
 wHAB_REF1,
 wHAB_REF2,
 wDIAM_INI_D,
 wDIAM_PEQ_R1,
 wDIAM_PEQ_R2,
 wDIAM_TRAINOS,
 wVEL_PM,
 wRST_TOT_METROS,
 wCORRECTOR_METROS,
 wPARO_DISTANCIA,
 wL_REFILO1,
 wL_REFILO2,
 wRESET_DIAM_D,
 wRESET_DIAM_R1,
 wRESET_DIAM_R2,
 wRESET_ALARMAS,
 wRESET_AVISOS,
 wSECCION_MATERIAL,
 WDIAM_PARADA,
 WCARGA_METROS_SESION,
 WCARGA_METROS_USUARIO,
 WDIAM_PARADA_CP,
 WCALANDRA_DG,
 END_HOLDING_REGISTERS
};

enum privileges {
PRIV_TOTAL = 0,
PRIV_MANT = 3,
PRIV_USER = 6
};

int ReadCommDATA(DATA **d);
int InitAlarms(DATA **d);
int CheckAlarms(DATA **d,PARAM **p, int AlarmWidgID);
int word2digitals(int word,int ** ret);



#endif
